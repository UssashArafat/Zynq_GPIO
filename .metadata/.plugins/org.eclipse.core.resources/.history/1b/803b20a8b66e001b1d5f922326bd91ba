/*******************************************************************************************
* Author:	Ussash Arafat
* Project:	LedCounter_Zedboard
* File:		LedCounter.c
* Tools:  	Vivado 2020.2
* 		  	Xilinx Vitis 2020.2
* Device: 	Zedboard
********************************************************************************************/

// Include Files
#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"
#include "xil_printf.h"

// Definitions
#define GPIO_DEVICE_ID_0 XPAR_AXI_GPIO_0_DEVICE_ID	// GPIO device that SWITCHes are connected to
#define GPIO_DEVICE_ID_1 XPAR_AXI_GPIO_1_DEVICE_ID	// GPIO device that LEDs are connected to
#define LED 0x00									// Initial LED value
#define LED_DELAY 80000000							// Software delay length
#define SWITCH_CHANNEL 1							// GPIO port for SWITCHes
#define LED_CHANNEL 1								// GPIO port for LEDs
#define printf xil_printf							// smaller, optimized printf

// GPIO Device driver instance
XGpio input, output;

//All LEDs on
void LedOn(int *led){
	*led = 0xFF;
}

//All LEDs off
void LedOff(int *led){
	*led = 0x00;
}

//LED controlling function
int LEDOutput(void)
{
	volatile int Delay;
	int Status0;
	int Status1;
	int led = LED; // Initialize to LED definition
	int switchValue;

		// GPIO driver initialization for SWITCHes
		Status0 = XGpio_Initialize(&input, GPIO_DEVICE_ID_0);
		if (Status0 != XST_SUCCESS) {
			return XST_FAILURE;
		}

		// GPIO driver initialization for LEDs
		Status1 = XGpio_Initialize(&output, GPIO_DEVICE_ID_1);
		if (Status1 != XST_SUCCESS) {
			return XST_FAILURE;
		}

		// Setting I/O direction
		XGpio_SetDataDirection(&output, SWITCH_CHANNEL, 0xFF); // Setting SWITCHes to input
		XGpio_SetDataDirection(&input, LED_CHANNEL, 0x00);	// Setting LEDs to output

		// Forever loop for controlling LEDs
			while (1) {
				 switchValue = XGpio_DiscreteRead(&input, SWITCH_CHANNEL); // Reading the SWITCH status

				switch(switchValue){
				case 0x00: LedOn(&led);
				XGpio_DiscreteWrite(&output, LED_CHANNEL, led);
				break;
				case 0x01: LedOff(&led);
				XGpio_DiscreteWrite(&output, LED_CHANNEL, led);
				break;
				}
				// Always on
				//led = 0xFF;

				// Always off
				//led = 0x00;

				// Blinking
				//led = ~ led;

				// Ring Counter
			/*	if(led == 0x80 || led == 0x00)
					led = 0x01;
				else
					led = 2 * led; */

				//Johnson Counter
			/*	if (led == 0x00)
					led = 0x01;
				else if(led % 2 == 0){
					johnsonDecriment = 2 * johnsonDecriment;
					led = led - johnsonDecriment;
				}
				else if(led == 0xFF){
					led = led - 1;
					johnsonDecriment = 1;
				}
				else
					led = (2 * led) + 1; */

				// Binary Counter
				//led = led + 1;

				//Gray Counter
			/*	binaryCounter = binaryCounter + 1;
			 	led = binaryCounter ^ (binaryCounter >> 1); */

				//Fibonacci Counter
			/*	fibonacciNext = fibonacciT0 + fibonacciT1;
				fibonacciT0 = fibonacciT1;
				fibonacciT1 = fibonacciNext;
				led = fibonacciT0; */

				// Wait a small amount of time so that the LED blinking is visible
				for (Delay = 0; Delay < LED_DELAY; Delay++);
			}

		return XST_SUCCESS; // Should be unreachable
}


// Main function
int main(void){

	int Status;

	// Execute the LED output
	Status = LEDOutput();
	if (Status != XST_SUCCESS) {
		xil_printf("GPIO output to the LEDs failed!\r\n");
	}

	return 0;
}

